{
  "_args": [
    [
      {
        "raw": "node-bot",
        "scope": null,
        "escapedName": "node-bot",
        "name": "node-bot",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Projects\\smsServ\\server\\smpp"
    ]
  ],
  "_from": "node-bot@latest",
  "_id": "node-bot@0.1.0",
  "_inCache": true,
  "_location": "/node-bot",
  "_npmUser": {
    "name": "ayms",
    "email": "avitte@jcore.fr"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-bot",
    "scope": null,
    "escapedName": "node-bot",
    "name": "node-bot",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-bot/-/node-bot-0.1.0.tgz",
  "_shasum": "28910bfb659bb5e77dc20c75534e1ebb1affe9e0",
  "_shrinkwrap": null,
  "_spec": "node-bot",
  "_where": "D:\\Projects\\smsServ\\server\\smpp",
  "author": {
    "name": "Aymeric Vitte",
    "email": "avitte@jcore.fr",
    "url": "http://www.jcore.fr"
  },
  "contributors": [],
  "dependencies": {},
  "description": "Fast and Real-time extraction of web pages information using node-dom (html,text,etc) based on given criterias",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "28910bfb659bb5e77dc20c75534e1ebb1affe9e0",
    "tarball": "https://registry.npmjs.org/node-bot/-/node-bot-0.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "http://www.jcore.fr",
  "keywords": [
    "bot",
    "gadget",
    "widget",
    "crawler",
    "dom",
    "html",
    "js",
    "style",
    "css",
    "w3c",
    "javascript",
    "ajax"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "./lib/bot.js",
  "maintainers": [
    {
      "name": "ayms",
      "email": "avitte@jcore.fr"
    }
  ],
  "name": "node-bot",
  "optionalDependencies": {},
  "readme": "node-bot\n===\n\nNode.js implementation of Extract Widget bot using https://github.com/Ayms/node-dom/, https://github.com/Ayms/node-gadgets/ and https://github.com/Ayms/node-googleSearch/\n\n## Purpose:\n\nReal-time extraction of web pages information (html, text, etc) based on given criterias.\n\nIt can be used as a server or an API, then parameters are passed in the URL, or directly as an independant node.js module.\n\nThe difference with node-gadgets is that for performances reasons it does not return the full gadgets, only the relevant information (shopbot example : seeking for \"nike lebron 9\" will return real-time the price of the shoes on nike store's web site)\n\n## Install :\n\n    npm install node-bot\n\nor\n\n    git clone http://github.com/Ayms/node-bot.git\n    cd node-bot\n    npm link .\n\t\nComplementary modules :\n\t node-ewa\n\t \n\t Note : node-ewa is not a public module for now, so you can only use node-bot's server/API mode. \n\n## Use :\n\n\tgetelements.js :\n\t\n### As a module :\n\t\n````\n\tvar getElements = require('node-bot').getElements;\n\t\n\tvar $E=encodeURIComponent;\n\t\n\tvar response={\n\t\tend:function(gadgets) {\n\t\t\tconsole.log(gadgets);\n\t\t\t//output format, see below\n\t\t}\n\t};\n\t\n\twith node-googleSearch\n\t\n\tvar params='search='+$E('nike shoes')'+'&name='+$E(nike_shoes)+'&regexp='+$E('\\\\$|€')+'&nbmax=20';\n\t\n\twithout node-googleSearch\n\t\n\tvar params='url=http://store.nike.com/us/en_us/%3Fl%3Dshop,pdp,ctr-inline/cid-1/pid-417121/pgid-437002&search='+$E('nike shoes')'+'&name='+$E(nike_shoes)+'&regexp='+$E('\\\\$|€')+'&nbmax=20';\n\n\tgetElements(params,response);\n````\n### As a server/API :\n\t\n````\n\tvar http = require('http'),  \n\tURL = require('url'),\n\tgetElements = require('node-bot').getElements;\n\n\tvar handleRequest = function (request, response) {\n\t  \n\t\tvar qs = URL.parse(request.url);\n\t\t  \n\t\tif (qs.pathname == '/getelements'){\n\t\t\tgetElements(qs.query,response);\n\t\t};\n\t};\n\n\thttp.createServer(handleRequest).listen(myport);\n````\nTo call it directly :\n\nwith node-googleSearch\n\nhttp://myserver:myport/getelements?name=nike_shoes&search='nikestore nike lebron9'&regexp=\\$|€&nbmax=20\n\nwithout node-googleSearch\n\nhttp://myserver:myport/getelements?url=http://store.nike.com/us/en_us/%3Fl%3Dshop,pdp,ctr-inline/cid-1/pid-417121/pgid-437002&name=nike_shoes&search='nikestore nike lebron9'&regexp=\\$|€&nbmax=20\n\nExample with encoded parameters to retrieve the price of \"lebron9\" shoes on nike store :\n\nwith node-googleSearch\n\nhttp://213.246.53.127:1341/getelements?name=nike_shoes&search=nike%20lebron%209&regexp=%5C%24%7C%C3%A2%E2%80%9A%C2%AC\n\nwithout node-googleSearch\n\nhttp://213.246.53.127:1341/getelements?url=http%3A%2F%2Fstore.nike.com%2Fus%2Fen_us%2F%253Fl%253Dshop%2Cpdp%2Cctr-inline%2Fcid-1%2Fpid-417121%2Fpgid-437002&name=nike_shoes&search=nike%20lebron%209&regexp=%5C%24%7C%C3%A2%E2%80%9A%C2%AC&nbmax=20\n\nTo call it from a script :\n\n````\n\tvar xscript=document.createElement('SCRIPT');\n\txscript.type=\"text/javascript\";\n\tvar params='name=nike_shoes'+'&search='+$E(nike shoes nikestore)+'&regexp='+$E('\\\\$|€')+'&nbmax=20'; //add url parameter if you already know it (do not use node-googleSearch)\n\txscript.src='http://myserver:myport/getelements?'+params;\n\tdocument.head.appendChild(xscript);\n\n\txscript.onload or onreadystatechange --> do what you have to do with the output\n````\n\nOutput format (see more details below) : nike_shoes=(Array containing the gadgets) (where 'nike_shoes' does correspond to the parameter 'name')\n\n````\n\tSo to use it you can do :\n\t\n\txscript.onload=function() {\n\t\tvar res=eval('nike_shoes'+this.shoe_number); //for example if the parameter name depends on some var in your code\n\t\tif (res.length>0) {\n\t\t\t...\n\t\t}\n\t\t\n\t\tor simply\n\t\t\n\t\tif (nike_shoes.length>0) {\n\t\t\t...\n\t\t}\n\t}\n````\n\nSee example here : http://www.extractwidget.com/nodejs/test/babyliss.html (see API code at the end of html file)\n\n\tNote : if your regexp does contain \"\\\" and if you pass it through a js var (Example above : $E('\\\\$|€')) make sure to double it.\n\t\n\tNote2 : make sure that the encoding of your files/browsers is utf-8\n\n## Parameters :\n\nurl : the url of the site where you want to extract gadgets from, if absent the url is retrieved with node-googleSearch using the value of search string (example : \"nikestore nike shoes\" will return the first url returned by Google Search that matches this string).\n\nname : the name that will become the name of the global var containing the output in its 'gadgets' property (example : nike_shoes.gadgets).\n\nregexp : while building the DOM, node-dom will use that regular expression to detect the objects that you are looking for (example : regexp=\\$|€ --> you are looking for gadgets in the page that are related to a price in $ or €).\n\nsearch : indicates that once the gadgets have been selected with the regexp, you can filter these gadgets based on the value of search field (example : \"nikestore nike shoes\" url can contain other products than shoes, node-bot will return only the results matching \"nike shoes\").\n\nnbmax : important parameter for performances, the value does specify a limit for the weight of searched gadgets so node-bot does not spend a lot of time processing gadgets that are not relevant. The default value is 100, recommended value is 20.\n\n## Output :\n\nThe output is an Array of :\n\n[gadget html,width,height,gadget name,reserved,base,price,html of regexp object]\n\nNo json format here for now for historical reasons and backward compatibility with existing projects (TODO later).\n\nThe first three parameters in the output are not filled by node-bot.\n\nSee https://github.com/Ayms/node-gadgets/ documentation for more details.\n\n## Tunnelling with node-Tor :\n\n\tTODO\n\t\n## Tests and API :\n\njCore server (http://www.jcore.fr) : http://213.246.53.127:1341/getelements?params\n\nExample with node-googleSearch :\n\nhttp://213.246.53.127:1341/getelements?name=nike_shoes&search=nike%20lebron%209&regexp=%5C%24%7C%C3%A2%E2%80%9A%C2%AC&nbmax=20\n\nExample without node-googleSearch :\n\nhttp://213.246.53.127:1341/getelements?url=http%3A%2F%2Fstore.nike.com%2Fus%2Fen_us%2F%253Fl%253Dshop%2Cpdp%2Cctr-inline%2Fcid-1%2Fpid-417121%2Fpgid-437002&name=nike_shoes&search=nike%20lebron%209&regexp=%5C%24%7C%C3%A2%E2%80%9A%C2%AC&nbmax=20\n\nYou can use the API on jCore server : http://213.246.53.127:1341 (if by any unforeseen reasons the server is down, please advise).\n\nLinks above might not return a correct result due to changes on nike store web site, then you can try :\n\nWebble project : http://www.webble.it/mindex5.php (quick test : click on OK, then on first link that appears)\n\nExample of API code and use, retrieve real time the price of babyliss homelight product on different merchant sites :\n\nhttp://www.extractwidget.com/nodejs/test/babyliss.html (click on \"acheter maintenant\" then wait for prices to be displayed in green)\n\nSee tests.txt in ./test\n",
  "repository": {
    "url": ""
  },
  "version": "0.1.0"
}
